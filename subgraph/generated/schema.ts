// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hasCollected(): boolean {
    let value = this.get("hasCollected");
    return value.toBoolean();
  }

  set hasCollected(value: boolean) {
    this.set("hasCollected", Value.fromBoolean(value));
  }

  get host(): Bytes {
    let value = this.get("host");
    return value.toBytes();
  }

  set host(value: Bytes) {
    this.set("host", Value.fromBytes(value));
  }

  get players(): Array<Bytes> | null {
    let value = this.get("players");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set players(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("players");
    } else {
      this.set("players", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get proto(): i32 {
    let value = this.get("proto");
    return value.toI32();
  }

  set proto(value: i32) {
    this.set("proto", Value.fromI32(value));
  }

  get quality(): i32 {
    let value = this.get("quality");
    return value.toI32();
  }

  set quality(value: i32) {
    this.set("quality", Value.fromI32(value));
  }

  get quorum(): BigInt {
    let value = this.get("quorum");
    return value.toBigInt();
  }

  set quorum(value: BigInt) {
    this.set("quorum", Value.fromBigInt(value));
  }

  get random(): BigInt | null {
    let value = this.get("random");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set random(value: BigInt | null) {
    if (value === null) {
      this.unset("random");
    } else {
      this.set("random", Value.fromBigInt(value as BigInt));
    }
  }

  get status(): i32 {
    let value = this.get("status");
    return value.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokens(): Array<BigInt> | null {
    let value = this.get("tokens");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokens(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get winner(): Bytes | null {
    let value = this.get("winner");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set winner(value: Bytes | null) {
    if (value === null) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromBytes(value as Bytes));
    }
  }
}
